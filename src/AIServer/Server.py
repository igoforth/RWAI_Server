import asyncio

from grpclib.health.service import Health
from grpclib.server import Server, Stream

from .__init__ import logger
# generated by protoc
from .job_grpc import JobManagerBase
from .job_pb2 import JobRequest, JobResponse

HOST = '127.0.0.1'
PORT = 50051

class JobManager(JobManagerBase):

    async def JobService(self, stream: Stream[JobRequest, JobResponse]) -> None:
        request = await stream.recv_message()
        assert request is not None
        message = f'Hello, {request.name}!'
        await stream.send_message(JobResponse(message=message))

class AIServer:
    def __init__(self, input_queue, output_queue) -> None:
        self.input_queue = input_queue
        self.output_queue = output_queue
        self.server = Server([JobManager(), Health()])
        
    def start(self, host: str, port: int):
        self.host: str = host
        self.port: int = port
        return self.server.start(self.host, self.port)
    
    def wait_closed(self):
        return self.server.wait_closed()


async def run(input_queue: asyncio.Queue, output_queue: asyncio.Queue):
    try:
        server = AIServer(input_queue, output_queue)
        await server.start(HOST, PORT)
        logger.info(f'Serving on {HOST}:{PORT}')
        await server.wait_closed()
    except asyncio.CancelledError: 
        logger.info("Server gracefully shut down")
